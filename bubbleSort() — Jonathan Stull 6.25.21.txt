Write an algorithm that sorts an array without using the sort() method. There are many different sorting algorithms - take the time to read about the following:
* Quick sort
* Merge sort
* Heap sort
* Insertion sort
* Bubble sort
* Selection sort
You may implement any of the above algorithms (or your own) to solve the problem - as long as it doesn't use sort().


Example
Input: [9, 2, 7, 12]


Output: [2, 7, 9, 12]


APPROACH


I'm going to use bubble sort for its ease of implementation (also Ryan told me so). In a bubble sort, we compare the value of a given index to the value of the index next to it. If the former is bigger than the latter, we simply swap the values.
* Like the other prompts, we'll solve this with nested for loops
* If array[index] > array[index + 1], we'll need to swap the values
* In order to facilitate a swap, we will first want to save the value of a given index into a separate variable
* Then we'll simply set array[index + 1] = array[index] and set array[index] to our separate variable


________________


FUNCTION


arr = [9, 2, 7, 12]


function bubbleSort(arr) {
for (i = 0; i < arr.length; i++) {
for (j = 0; j < arr.length - i - 1; j++) {
if (arr[j] > arr[i]) {
let tempVal = arr[j];
arr[j] = arr[i];
arr[i] = tempVal;
}
}
}
return arr;
}


***Note that the above solution is the function I presented (an incorrect one; tried to present without notes); the following notes try to explain why I was wrong
* This doesn't work because, in a bubble sort, I never want to actually compare the value of arr[i] with arr[j], and I don't know why I did (but I'm committed to finding out)
   * I think I confused sorting with checking uniqueness; by comparing the value of an outer for to the value of an inner for at the given indices, I can see whether their identities are equal or not, but I can't evaluate where they should be in relation to each other
* In fact, it turns out I don't even need an inner for—I can do it with a single loop
* The inner for is likely related to optimization, but I can't explain why other than to say that limiting the length of the array on which we act (j < arr.length - i - 1)) means we don't have to iterate over values that have already been sorted
   * This is because as the value i increments, we can safely assume that the values of i that came before the current value of i are correctly sorted and we can ignore anything at the end of the array
   * So using an inner for is likely just a bit more efficient


________________


***These are correct functions and I'm including them for reference and my own learning


function bubbleSort(arr) {
for (i = 0; i < arr.length; i++) {
for (j = 0; j < arr.length - i - 1; j++) {
if (arr[j] > arr[j + 1]) {
let tempVal = arr[j];
arr[j] = arr[j + 1];
arr[j + 1] = tempVal;
}
}
}
return arr;
}


function bubbleSort(arr) {
for (i = 0; i < arr.length; i++) {
if (arr[i] > arr[i + 1]) {
let tempVal = arr[i];
arr[i] = arr[i + 1];
arr[i + 1] = tempVal;
}
}
return arr;
}